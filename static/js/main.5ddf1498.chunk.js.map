{"version":3,"sources":["api.ts","routes/Coins.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","Container","styled","div","Header","header","CoinsList","ul","Coin","li","props","theme","coinColor","textColor","accentColor","Title","h1","Loader","span","Img","img","Coins","useQuery","isLoading","data","Helmet","slice","map","coin","to","pathname","id","state","name","src","symbol","toLowerCase","Chart","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","type","series","price","x","time_close","y","open","high","low","close","options","mode","chart","height","width","toolbar","show","background","yaxis","tooltip","enabled","xaxis","CoinPriceList","CoinPrice","Price","tickersData","quotes","USD","volume_24h_change_24h","market_cap_change_24h","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","useParams","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","tickersLoading","loading","history","useHistory","onClick","push","rank","toFixed","description","total_supply","max_supply","path","Router","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","useState","isDark","setIsDark","current","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.5ddf1498.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n    const endDate = Math.floor(Date.now() / 1000);\n    const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n    return fetch(\n      `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n    ).then((response) => response.json());\n  }","import { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoins } from \"../api\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.coinColor};\n  color: ${(props) => props.theme.textColor};\n  \n  border-radius: 15px;\n  margin-bottom: 10px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\n\n\nfunction Coins() {\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;","import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n    const { isLoading, data } = useQuery<IHistorical[]>(\n        [\"ohlcv\", coinId],\n        () => fetchCoinHistory(coinId),\n        {\n            refetchInterval: 10000,\n        }\n  );\n  //console.log(data);\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => ({\n                x: price.time_close,\n                y: [price.open, price.high, price.low, price.close],\n              })),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: \"dark\",\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            // grid: { show: false },\n            // stroke: {\n            //   curve: \"smooth\",\n            //   width: 4,\n            // },\n            yaxis: {\n              show: false,\n              tooltip: {\n                enabled: true\n              }\n            },\n            xaxis: {\n            //   axisBorder: { show: false },\n            //   axisTicks: { show: false },\n              //labels: { show: false },\n              type: \"datetime\",\n              // categories: data?.map((price) => price.time_close),\n            },\n            // fill: {\n            //   type: \"gradient\",\n            //   gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n            // },\n            // colors: [\"#0fbcf9\"],\n            // tooltip: {\n            //   y: {\n            //     formatter: (value) => `$${value.toFixed(2)}`,\n            //   },\n            // },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;","import { useQuery } from \"react-query\";\nimport { fetchCoinTickers } from \"../api\";\nimport styled from \"styled-components\";\n\ninterface IPrice {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\ninterface PriceProps {\n  coinId: string;\n}\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst CoinPriceList = styled.ul``;\n\nconst CoinPrice = styled.li`\n  background-color: ${(props) => props.theme.coinColor};\n  color: ${(props) => props.theme.textColor};\n  \n  border-radius: 15px;\n  margin-bottom: 10px;\n  padding : 0px 20px;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n  }\n`;\n\n\nfunction Price({ coinId }: PriceProps) {\n    const { isLoading: tickersLoading, data: tickersData } = useQuery<IPrice>(\n        [\"tickers\", coinId],\n        () => fetchCoinTickers(coinId),\n        {\n            refetchInterval: 10000,\n        }\n        \n  );\n\n  \n  \n\n    return (\n        <Container>\n            <CoinPriceList>\n                <CoinPrice>\n                    <span>Price : ${tickersData?.quotes.USD.price}</span>\n                </CoinPrice>\n                <CoinPrice>\n                    <span>Volume change rate in 24h : {tickersData?.quotes.USD.volume_24h_change_24h}%</span>\n                </CoinPrice>\n                <CoinPrice>\n                    <span>Market Cap change in 24h : {tickersData?.quotes.USD.market_cap_change_24h}%</span>\n                </CoinPrice>\n            </CoinPriceList>\n        </Container>\n    )\n  }\n  \n  export default Price;","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { Link, useHistory} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 33%;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    padding: 7px 0px;\n    display: block;\n  }\n`;\ninterface RouteParams {\n  coinId: string;\n}\ninterface RouteState {\n  name: string;\n}\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\nfunction Coin() {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000,\n    }\n  );\n  const loading = infoLoading || tickersLoading;\n\n  const history = useHistory();\n  const goBack = () => history.push(\"/\");\n\n  return (\n      \n    <Container>\n        <button onClick={goBack}>Go Back</button>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              <Price coinId={coinId}/>\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;","import { BrowserRouter, Switch, Route, useHistory } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport Coins from \"./routes/Coins\";\nimport Coin from \"./routes/Coin\";\n\n\n\nfunction Router() {\n    // const history = useHistory();\n\n    // const goBack = () => {\n    //     //history.goBack();\n    //     history.push(\"/\");\n    //   }\n    \n\n  return (\n    <BrowserRouter>\n        {/* <button onClick={goBack}>Go Back</button> */}\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\nexport default Router;","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme = {\n    bgColor: \"#2f3640\",\n    textColor: \"#008B8B\",\n    accentColor: \"#9c88ff\",\n    coinColor: \"#F5F5DC\",\n};\n  \nexport const lightTheme = {\n    bgColor: \"white\",\n    textColor: \"#111\",\n    accentColor: \"#9c88ff\",\n    coinColor: \"#5F9EA0\",\n};\n\n//export const theme: DefaultTheme = {\nexport const theme = {\n    darkTheme,\n    lightTheme,\n\n };\n\n// export const theme: DefaultTheme = {\n//     bgColor: \"#2f3640\",\n//     textColor: \"#f5f6fa\",\n//     accentColor: \"#9c88ff\",\n\n// };","import { createGlobalStyle } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\n\nfunction App() {\n  const [isDark, setIsDark] = useState(true);\n  const toggleDark = () => setIsDark((current) => !current);\n\n\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <button onClick={toggleDark}>Toggle Mode</button>\n        \n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\n//import { theme } from \"./theme\";\nimport {darkTheme, lightTheme} from \"./theme\";\n\n\nconst queryClient = new QueryClient();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}